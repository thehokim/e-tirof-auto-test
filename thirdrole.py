import requests
import json
import pytest
import allure
import time
from datetime import datetime


# === ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===

BASE_URL = "https://etirof.cmspace.uz/api"
LOGIN_URL = f"{BASE_URL}/auth/login"
CADASTRE_URL = f"{BASE_URL}/cadastre"

USER = {"username": "rool3", "password": "qwerty"}


# === üîß API Client ===

class AgencyApiClient:
    """API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–æ–ª–∏ agency"""
    
    def __init__(self, token: str):
        self.token = token
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        })
        self.base_url = BASE_URL
        self.cadastre_url = CADASTRE_URL
    
    def get_cadastre_list(self, params=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
        return self.session.get(self.cadastre_url, params=params)
    
    def get_cadastre_by_id(self, cadastre_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ ID"""
        return self.session.get(f"{self.cadastre_url}/{cadastre_id}")
    
    def get_cadastre_by_number(self, cadastre_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É"""
        return self.session.get(f"{self.cadastre_url}/cad/{cadastre_number}")
    
    def agency_verification(self, cadastre_id, verified: bool, comment: str = None):
        """–ê–≥–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–¥–∞—Å—Ç—Ä–∞"""
        payload = {"verified": verified}
        if comment:
            payload["comment"] = comment
        return self.session.patch(
            f"{self.cadastre_url}/{cadastre_id}/agency_verification",
            json=payload
        )
    
    def get_statistics(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        possible_endpoints = [
            f"{self.cadastre_url}/statistics",
            f"{self.cadastre_url}/stats",
            f"{self.cadastre_url}/summary"
        ]
        for url in possible_endpoints:
            resp = self.session.get(url)
            if resp.status_code == 200:
                return resp, url
        return None, None


# === üß© –§–∏–∫—Å—Ç—É—Ä—ã ===

@pytest.fixture(scope="session")
@allure.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è agency (rool3)")
def auth_token():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è rool3 –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    allure.dynamic.parameter("Username", USER['username'])
    allure.dynamic.parameter("Role", "agency")
    
    with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {LOGIN_URL}"):
        resp = requests.post(LOGIN_URL, json=USER)
        
        allure.attach(
            json.dumps({"username": USER['username'], "password": "***"}, indent=2),
            name="Login Request",
            attachment_type=allure.attachment_type.JSON
        )
        
        allure.attach(
            resp.text,
            name="Login Response",
            attachment_type=allure.attachment_type.JSON
        )
        
        assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {resp.text}"
    
    with allure.step("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞"):
        data = resp.json()
        token = data.get("token")
        role = data.get("role")
        
        assert token, "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞"
        
        allure.attach(
            f"Token: {token[:20]}...\nRole: {role}",
            name="Auth Info",
            attachment_type=allure.attachment_type.TEXT
        )
        
        print(f"‚úÖ {USER['username']} –≤–æ—à—ë–ª –∫–∞–∫ —Ä–æ–ª—å: {role}")
        
    return token


@pytest.fixture(scope="session")
def headers(auth_token):
    """HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å Bearer —Ç–æ–∫–µ–Ω–æ–º"""
    return {"Authorization": f"Bearer {auth_token}"}


@pytest.fixture(scope="session")
def api_client(auth_token):
    """API –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    return AgencyApiClient(auth_token)


@pytest.fixture
def first_cadastre(api_client):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    with allure.step("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
        resp = api_client.get_cadastre_list()
        assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞: {resp.text}"
        
        data = resp.json().get("data", [])
        assert data, "–ù–µ—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ"
        
        cadastre = data[0]
        cadastre_id = cadastre.get("id") or cadastre.get("ID")
        
        allure.attach(
            json.dumps(cadastre, indent=2, ensure_ascii=False),
            name="First Cadastre",
            attachment_type=allure.attachment_type.JSON
        )
        
        allure.dynamic.parameter("Cadastre ID", cadastre_id)
        
        return cadastre


# === üß™ –¢–ï–°–¢–´ ===

@allure.epic("Cadastre API")
@allure.feature("Cadastre Viewing")
@allure.story("List and Get Cadastres")
class TestCadastreViewing:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
    
    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å agency –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–¥–∞—Å—Ç—Ä–æ–≤")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.tag("smoke", "cadastre", "list")
    def test_01_list_cadastre_items(self, api_client):
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞"):
            response = api_client.get_cadastre_list()
            
            allure.attach(
                f"GET {api_client.cadastre_url}",
                name="Request URL",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                response.text,
                name="Response Body",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ 200"):
            assert response.status_code == 200, f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞: {response.text}"
        
        with allure.step("–ü–æ–¥—Å—á–µ—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"):
            total = len(response.json().get("data", []))
            
            allure.attach(
                f"–í—Å–µ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤: {total}",
                name="Statistics",
                attachment_type=allure.attachment_type.TEXT
            )
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total} –∫–∞–¥–∞—Å—Ç—Ä–æ–≤")
    
    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ ID")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ –µ–≥–æ ID")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("cadastre", "read")
    def test_02_get_cadastre_by_id(self, api_client, first_cadastre):
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ ID"""
        
        cad_id = first_cadastre.get("id") or first_cadastre.get("ID")
        
        with allure.step(f"–ó–∞–ø—Ä–æ—Å –∫–∞–¥–∞—Å—Ç—Ä–∞ —Å ID={cad_id}"):
            resp = api_client.get_cadastre_by_id(cad_id)
            
            allure.attach(
                resp.text,
                name="Cadastre Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è"):
            assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥–∞—Å—Ç—Ä–∞ ID={cad_id}: {resp.text}"
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–∞–¥–∞—Å—Ç—Ä ID={cad_id}")
    
    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ –µ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("cadastre", "read")
    def test_03_get_cadastre_by_cad_number(self, api_client, first_cadastre):
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É"""
        
        cad_number = first_cadastre.get("cadastreId") or first_cadastre.get("cadastral_number")
        assert cad_number, "–ù–µ—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞"
        
        allure.dynamic.parameter("Cadastre Number", cad_number)
        
        with allure.step(f"–ó–∞–ø—Ä–æ—Å –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É {cad_number}"):
            resp = api_client.get_cadastre_by_number(cad_number)
            
            allure.attach(
                f"GET {api_client.cadastre_url}/cad/{cad_number}",
                name="Request URL",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è"):
            assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É: {resp.text}"
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–∞–¥–∞—Å—Ç—Ä –ø–æ –Ω–æ–º–µ—Ä—É {cad_number}")


@allure.epic("Cadastre API")
@allure.feature("Agency Verification")
@allure.story("Verify Cadastre")
class TestAgencyVerification:
    """–¢–µ—Å—Ç—ã –∞–≥–µ–Ω—Ç—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    @allure.title("–ê–≥–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è (verified=True)")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ agency –º–æ–∂–µ—Ç –æ–¥–æ–±—Ä–∏—Ç—å –∫–∞–¥–∞—Å—Ç—Ä")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.tag("verification", "critical")
    def test_01_agency_verification_positive(self, api_client, first_cadastre):
        """‚úÖ –ê–≥–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è (–≤–µ—Ä–Ω—ã–π PATCH)"""
        
        cad_id = first_cadastre.get("id") or first_cadastre.get("ID")
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ"):
            comment = f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ–º {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            resp = api_client.agency_verification(cad_id, verified=True, comment=comment)
            
            allure.attach(
                json.dumps({"verified": True, "comment": comment}, indent=2),
                name="Verification Payload",
                attachment_type=allure.attachment_type.JSON
            )
            
            allure.attach(
                resp.text,
                name="Response",
                attachment_type=allure.attachment_type.JSON
            )
            
            if resp.status_code == 403:
                pytest.skip("–£ rool3 –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∞–≥–µ–Ω—Ç—Å–∫—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"):
            assert resp.status_code in (200, 202), f"–û—à–∏–±–∫–∞ PATCH: {resp.text}"
            print(f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è ID={cad_id}")
    
    @allure.title("–ê–≥–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è (verified=False)")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ agency –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–∞–¥–∞—Å—Ç—Ä")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("verification")
    def test_02_agency_verification_false(self, api_client, first_cadastre):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º"""
        
        cad_id = first_cadastre.get("id") or first_cadastre.get("ID")
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"):
            comment = f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–º {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            resp = api_client.agency_verification(cad_id, verified=False, comment=comment)
            
            allure.attach(
                json.dumps({"verified": False, "comment": comment}, indent=2),
                name="Rejection Payload",
                attachment_type=allure.attachment_type.JSON
            )
            
            allure.attach(
                resp.text,
                name="Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"):
            assert resp.status_code in (200, 202), f"–û—à–∏–±–∫–∞ PATCH false: {resp.text}"
            print(f"‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª –∫–∞–¥–∞—Å—Ç—Ä ID={cad_id}")


@allure.epic("Cadastre API")
@allure.feature("Cadastre Filtering & Sorting")
@allure.story("Filter and Sort")
class TestCadastreFiltering:
    """–¢–µ—Å—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    
    @allure.title("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ –ø–æ –∫–æ–¥—É —Ä–µ–≥–∏–æ–Ω–∞ SOATO")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("filter", "region")
    def test_01_filter_by_region(self, api_client):
        """‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
        
        region_code = "1726"
        allure.dynamic.parameter("Region SOATO", region_code)
        
        with allure.step(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É {region_code}"):
            params = {"region_soato": region_code}
            resp = api_client.get_cadastre_list(params=params)
            
            allure.attach(
                f"GET {api_client.cadastre_url}?region_soato={region_code}",
                name="Request URL",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="Filtered Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"):
            assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {resp.text}"
        
        with allure.step("–ü–æ–¥—Å—á–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"):
            count = len(resp.json().get('data', []))
            
            allure.attach(
                f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}",
                name="Filter Results",
                attachment_type=allure.attachment_type.TEXT
            )
            
            print(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É {region_code} —É—Å–ø–µ—à–Ω–∞ ({count} –∑–∞–ø–∏—Å–µ–π)")
    
    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ª–∏–º–∏—Ç")
    @allure.severity(allure.severity_level.MINOR)
    @allure.tag("sort", "limit")
    def test_02_get_recent_cadastres(self, api_client):
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ (–º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞)"""
        
        params = {"sort": "created_at", "order": "desc", "limit": 5}
        allure.dynamic.parameter("Params", str(params))
        
        with allure.step("–ó–∞–ø—Ä–æ—Å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ –ª–∏–º–∏—Ç–æ–º"):
            resp = api_client.get_cadastre_list(params=params)
            
            allure.attach(
                resp.text,
                name="Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"):
            assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ: {resp.text}"
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞"):
            data = resp.json().get("data", [])
            count = len(data)
            
            if count > 5:
                allure.attach(
                    f"API –≤–µ—Ä–Ω—É–ª–æ {count} –∑–∞–ø–∏—Å–µ–π –≤–º–µ—Å—Ç–æ 5",
                    name="Limit Warning",
                    attachment_type=allure.attachment_type.TEXT
                )
                print(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª–æ {count} –≤–º–µ—Å—Ç–æ 5 ‚Äî –ª–∏–º–∏—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
            else:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {count} –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ (–ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    
    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ limit –∏ offset")
    @allure.severity(allure.severity_level.MINOR)
    @allure.tag("pagination")
    def test_03_check_pagination(self, api_client):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–º—è–≥–∫–∏–π —Ä–µ–∂–∏–º)"""
        
        params = {"limit": 3, "offset": 0}
        allure.dynamic.parameter("Params", str(params))
        
        with allure.step("–ó–∞–ø—Ä–æ—Å —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"):
            resp = api_client.get_cadastre_list(params=params)
            
            allure.attach(
                resp.text,
                name="Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"):
            assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {resp.text}"
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π"):
            data = resp.json().get("data", [])
            count = len(data)
            
            allure.attach(
                f"–ü–æ–ª—É—á–µ–Ω–æ: {count} –∑–∞–ø–∏—Å–µ–π\n–û–∂–∏–¥–∞–ª–æ—Å—å: ‚â§ 3",
                name="Pagination Check",
                attachment_type=allure.attachment_type.TEXT
            )
            
            print(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª–æ {count} –∑–∞–ø–∏—Å–µ–π (–æ–∂–∏–¥–∞–ª–æ—Å—å ‚â§ 3). –ü–∞–≥–∏–Ω–∞—Ü–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


@allure.epic("Cadastre API")
@allure.feature("Statistics & Profile")
@allure.story("Additional Endpoints")
class TestAdditionalEndpoints:
    """–¢–µ—Å—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    
    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    @allure.severity(allure.severity_level.MINOR)
    @allure.tag("statistics")
    def test_01_get_statistics(self, api_client):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
        
        with allure.step("–ü–æ–∏—Å–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"):
            resp, url = api_client.get_statistics()
            
            if resp and resp.status_code == 200:
                allure.attach(
                    f"URL: {url}",
                    name="Statistics Endpoint",
                    attachment_type=allure.attachment_type.TEXT
                )
                
                allure.attach(
                    resp.text,
                    name="Statistics Response",
                    attachment_type=allure.attachment_type.JSON
                )
                
                print(f"‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–π–¥–µ–Ω: {url}")
                print(f"–û—Ç–≤–µ—Ç: {list(resp.json().keys())}")
            else:
                print("‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–µ–Ω 404/400). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                pytest.skip("–≠–Ω–¥–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")


@allure.epic("Cadastre API")
@allure.feature("Validation & Error Handling")
@allure.story("Negative Tests")
class TestValidation:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    @allure.title("–ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º ID")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("negative", "validation")
    def test_01_invalid_id_format(self, api_client):
        """‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ID —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
        
        invalid_id = "abc123"
        allure.dynamic.parameter("Invalid ID", invalid_id)
        
        with allure.step(f"–ó–∞–ø—Ä–æ—Å —Å ID={invalid_id}"):
            resp = api_client.get_cadastre_by_id(invalid_id)
            
            allure.attach(
                resp.text,
                name="Error Response",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ 400 –∏–ª–∏ 422"):
            assert resp.status_code in (400, 422), f"–û–∂–∏–¥–∞–ª—Å—è 400/422, –ø–æ–ª—É—á–µ–Ω–æ {resp.status_code}"
            print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID –ø—Ä–æ—à–ª–∞: {resp.status_code}")
    
    @allure.title("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∏—Ç–æ–≥–æ JSON –≤ –∑–∞–ø—Ä–æ—Å–µ")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("negative", "validation")
    def test_02_patch_invalid_json(self, api_client, first_cadastre):
        """‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏—Ç–æ–≥–æ JSON"""
        
        cad_id = first_cadastre.get("id") or first_cadastre.get("ID")
        bad_json = '{"verified": true, "comment": "broken json"'  # –±–µ–∑ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–∫–æ–±–∫–∏
        
        allure.dynamic.parameter("Malformed JSON", bad_json)
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON"):
            resp = requests.patch(
                f"{api_client.cadastre_url}/{cad_id}/agency_verification",
                headers={**api_client.session.headers, "Content-Type": "application/json"},
                data=bad_json
            )
            
            allure.attach(
                bad_json,
                name="Invalid JSON",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="Error Response",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ 400/422/500"):
            assert resp.status_code in (400, 422, 500), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {resp.status_code}"
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî {resp.status_code}")


@allure.epic("Cadastre API")
@allure.feature("Authentication & Security")
@allure.story("Access Control")
class TestAuthentication:
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    @allure.title("–î–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
    @allure.description("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.tag("security", "auth", "negative")
    def test_01_unauthorized_access(self):
        """‚ùå –î–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ Authorization"):
            resp = requests.get(CADASTRE_URL)
            
            allure.attach(
                f"GET {CADASTRE_URL}\nHeaders: None",
                name="Request Info",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="401 Response",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ 401"):
            assert resp.status_code == 401, f"–û–∂–∏–¥–∞–ª—Å—è 401, –ø–æ–ª—É—á–µ–Ω {resp.status_code}"
            print("‚ùå –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª 401 Unauthorized")
    
    @allure.title("–î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
    @allure.description("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.tag("security", "auth", "negative")
    def test_02_wrong_token(self):
        """‚ùå –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
        
        fake_token = "INVALID_TOKEN_123"
        allure.dynamic.parameter("Fake Token", fake_token)
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"):
            fake_headers = {"Authorization": f"Bearer {fake_token}"}
            resp = requests.get(CADASTRE_URL, headers=fake_headers)
            
            allure.attach(
                f"Authorization: Bearer {fake_token}",
                name="Request Headers",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="Error Response",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ 401 –∏–ª–∏ 403"):
            assert resp.status_code in (401, 403), f"–û–∂–∏–¥–∞–ª—Å—è 401/403, –ø–æ–ª—É—á–µ–Ω {resp.status_code}"
            print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ ‚Äî {resp.status_code}")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s", "--alluredir=allure-results"])
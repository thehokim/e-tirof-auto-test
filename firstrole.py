import requests
import json
import pytest
import time
from io import BytesIO
import os

# --- üõ†Ô∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø PUSH-–ò–ù–¢–ï–ì–†–ê–¶–ò–ò üõ†Ô∏è ---

BASE_URL = "https://etirof.cmspace.uz/api"
BASE_PUSH_URL = f"{BASE_URL}/cadastre/integration/push"
BASE_LIST_URL = f"{BASE_URL}/cadastre/integration" 
INTEGRATION_HEADERS = {"Authorization": "Basic Y2FkYXN0cmU6Y2FkNTY3QUFB"} 
FIRST_USER = {"username": "rool1", "password": "qwerty"}
FILE_PATH = "/home/user/Downloads/12636_2_230FF8971C606F9DCE94288E49178A0490EBD387.pdf"

# --- –§–ò–ö–°–¢–£–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ conftest.py) ---

@pytest.fixture(scope="session")
def pdf_file_content():
    """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ PDF –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    if not os.path.exists(FILE_PATH):
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {FILE_PATH}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
        return b'%PDF-1.7\r\n%PDF-Test\r\n1 0 obj\n<< /Type /Catalog /Pages [3 0 R] /Count 1 >>\nendobj\n3 0 obj\n<< /Type /Page /MediaBox [0 0 612 792] >>\nendobj\n%%EOF'
    with open(FILE_PATH, "rb") as f:
        return f.read()

@pytest.fixture(scope="session")
def first_role_auth_headers():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'rool1' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ Authorization (Bearer Token)."""
    url = f"{BASE_URL}/auth/login"
    
    response = requests.post(url, json=FIRST_USER)
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ {FIRST_USER['username']}: {response.text}"
    
    data = response.json()
    token = data.get("token")
    role = data.get("role")

    assert token, f"–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ —É {FIRST_USER['username']}"
    print(f"\n‚úÖ {FIRST_USER['username']} –≤–æ—à—ë–ª –∫–∞–∫ —Ä–æ–ª—å: {role} (–¢–æ–∫–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é).")
    
    headers = {
        "Authorization": f"Bearer {token}", 
    }
    return headers


def find_cadastre_item(url, headers, unique_uid):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É."""
    search_params = {"cadastral_number": unique_uid} 
    search_response = requests.get(url, headers=headers, params=search_params)
    
    if search_response.status_code != 200:
        return None, search_response.status_code, search_response.text

    try:
        search_data = search_response.json()
    except json.JSONDecodeError:
        return None, search_response.status_code, "–ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç–≤–µ—Ç"
        
    items = search_data.get('results', []) or search_data.get('data', []) or search_data
    
    created_item = next((item for item in items if item.get("cadastreId") == unique_uid or item.get("uid") == unique_uid), None)
    
    if created_item:
        created_id = created_item.get("ID") or created_item.get("id") or created_item.get("uid") 
        return created_id, 200, None
        
    return None, 200, "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"


@pytest.fixture(scope="session")
def created_cadastre_item_id(pdf_file_content, first_role_auth_headers):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç PUSH-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID, 
    –∏—Å–ø–æ–ª—å–∑—É—è GET-–∑–∞–ø—Ä–æ—Å —Å Basic Auth –∏ Fallback –Ω–∞ Bearer Token.
    """
    unique_uid = f"test_auto_{int(time.time())}" 
    
    test_data_base = {
        "uidSPUnit": unique_uid,
        "cadastral_number": unique_uid, 
        "address": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∞–¥—Ä–µ—Å",
        "land_fund_type_code": "10", 
        "land_use_type_code": "20", 
        "vid": "foo",
        "region_soato": "1726", 
        "district_soato": "1726264", 
        "neighborhood_soato": "1726264",
        "law_accordance_id": "1", 
        "selected_at": "2024-03-06 12:00:00",
        "step_deadline": "2024-03-10 12:00:00",
        # –ì–µ–æ–º–µ—Ç—Ä–∏—è 
        "location": {
            "type": "Polygon",
            "coordinates": [[[70.977547181, 40.742336418],[70.977609794, 40.742167422],[70.977411895, 40.74212747],[70.977547181, 40.742336418]]]
        }, 
        "mulk_egalari": [{"mulk_egasi": "A_Test", "mulk_egasi_stir": "111"}]
    }

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è multipart/form-data
    text_data = {k: v for k, v in test_data_base.items() if k not in ["location", "mulk_egalari"]}
    text_data["location"] = json.dumps(test_data_base["location"])
    text_data["mulk_egalari"] = json.dumps(test_data_base["mulk_egalari"])
    
    files = [(key, (None, value)) for key, value in text_data.items()]
    files.append(("building_land_cad_plan", ("land_plan.pdf", BytesIO(pdf_file_content), "application/pdf")))
    files.append(("governor_decree", ("decree.pdf", BytesIO(pdf_file_content), "application/pdf")))

    # 1. –í—ã–ø–æ–ª–Ω—è–µ–º PUSH-–∑–∞–ø—Ä–æ—Å
    response = requests.post(BASE_PUSH_URL, headers=INTEGRATION_HEADERS, files=files)
    
    if response.status_code != 201:
        pytest.fail(f"üî¥ PUSH-–∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–∞–ª–µ–Ω (–ö–æ–¥ {response.status_code}): {response.text}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Basic Auth –≤–µ—Ä–Ω—ã–π.")

    # 2. –ü–æ–∏—Å–∫ ID —á–µ—Ä–µ–∑ GET-–∑–∞–ø—Ä–æ—Å (–ø–æ–ø—ã—Ç–∫–∞ 1: Basic Auth)
    print(f"\n‚úÖ PUSH —É—Å–ø–µ—à–µ–Ω. –ü–æ–∏—Å–∫ ID –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É {unique_uid}...")
    
    created_id, status_code, error_message = find_cadastre_item(BASE_LIST_URL, INTEGRATION_HEADERS, unique_uid)
    
    if created_id:
        print(f"üéâ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —Å ID: {created_id} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Basic Auth.")
        return created_id
    
    if status_code == 401:
        # 3. –û—Ç–∫–∞—Ç: Basic Auth –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º Bearer Token 'rool1'
        print("‚ö†Ô∏è Basic Auth GET –≤–µ—Ä–Ω—É–ª 401. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å Bearer Token 'rool1'...")
        
        created_id, status_code_bearer, error_msg_bearer = find_cadastre_item(BASE_LIST_URL, first_role_auth_headers, unique_uid)
        
        if created_id:
            print(f"üéâ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω —Å ID: {created_id} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bearer Token.")
            return created_id
        else:
            pytest.fail(
                f"üî¥ ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ —Å Bearer Token ({status_code_bearer}).\n"
                f"–û—à–∏–±–∫–∞ Bearer Token GET: {error_msg_bearer}"
            )

    # 4. –°–±–æ–π –ø–æ–∏—Å–∫–∞ Basic Auth, –Ω–µ 401
    pytest.fail(
        f"üî¥ ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ PUSH. GET-–ø–æ–∏—Å–∫ Basic Auth –≤–µ—Ä–Ω—É–ª: –ö–æ–¥ {status_code}, –û—à–∏–±–∫–∞: {error_message}"
    )

# --- –¢–ï–°–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò ---

def test_update_screenshot(first_role_auth_headers, created_cadastre_item_id):
    """
    –¢–µ—Å—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
    """
    cadastre_id = created_cadastre_item_id
    url = f"{BASE_URL}/cadastre/{cadastre_id}/screenshot"
    
    screenshot_payload = {
        "screenshot": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg==",
        "file_name": f"{cadastre_id}_screenshot.png"
    }
    
    response = requests.patch(url, headers=first_role_auth_headers, json=screenshot_payload)
    
    assert response.status_code in [200, 202], f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è ID {cadastre_id}: –ö–æ–¥ {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}"
    print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è ID {cadastre_id} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")


def test_get_land_plan(first_role_auth_headers, created_cadastre_item_id):
    """
    –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (land plan) –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
    """
    cadastre_id = created_cadastre_item_id
    url = f"{BASE_URL}/cadastre/{cadastre_id}/land_plan"
    
    response = requests.get(url, headers=first_role_auth_headers)
    
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è ID {cadastre_id}: –ö–æ–¥ {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}"
    
    assert len(response.content) > 100, "–û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–µ–º–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏–ª–∏ –ø—É—Å—Ç."
    
    print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–µ–º–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è ID {cadastre_id} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")


def test_update_geometry_fix(first_role_auth_headers, created_cadastre_item_id):
    """
    –¢–µ—Å—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ ('geometry_fix').
    """
    cadastre_id = created_cadastre_item_id
    url = f"{BASE_URL}/cadastre/{cadastre_id}/geometry_fix"
    
    fixed_geometry_payload = {
        "fixed_geojson": {
            "type": "Polygon",
            "coordinates": [[[70.977547181, 40.742336418],[70.977609794, 40.742167422],[70.977411895, 40.74212747],[70.977547181, 40.742336418]]]
        },
        "geometry_rotation": 5.0,
        "move_distance": 1.5,
        "space_image_id": "satellite_2025_01_01",
        "space_image_date": "2025-01-01T00:00:00Z",
        "edit_note": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏."
    }

    response = requests.patch(url, headers=first_role_auth_headers, json=fixed_geometry_payload)

    assert response.status_code in [200, 202], f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è ID {cadastre_id}: –ö–æ–¥ {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}"
    
    print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è ID {cadastre_id} –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")
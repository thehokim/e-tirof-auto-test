"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ä–æ–ª–∏ 'verify' (rool2)
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ fifthrole.py
"""

import requests
import json
import pytest
import allure
import time
from io import BytesIO
import os
from datetime import datetime


# === ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===

BASE_URL = "https://etirof.cmspace.uz/api"
LOGIN_URL = f"{BASE_URL}/auth/login"
CADASTRE_URL = f"{BASE_URL}/cadastre"

USER = {"username": "rool2", "password": "qwerty"}
FILE_PATH = "12636_2_230FF8971C606F9DCE94288E49178A0490EBD387.pdf"


# === üîß API Client ===

class VerifyApiClient:
    """API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–æ–ª–∏ verify"""
    
    def __init__(self, token: str):
        self.token = token
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        })
        self.base_url = BASE_URL
        self.cadastre_url = CADASTRE_URL
    
    def get_cadastre_list(self, params=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
        return self.session.get(self.cadastre_url, params=params)
    
    def get_cadastre_by_id(self, cadastre_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ ID"""
        return self.session.get(f"{self.cadastre_url}/{cadastre_id}")
    
    def verify_cadastre(self, cadastre_id, verified: bool, comment: str = None):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–¥–∞—Å—Ç—Ä–∞"""
        payload = {"verified": verified}
        if comment:
            payload["comment"] = comment
        return self.session.patch(
            f"{self.cadastre_url}/{cadastre_id}/verification",
            json=payload
        )
    
    def filter_by_region(self, region_soato: str):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
        return self.get_cadastre_list(params={"region_soato": region_soato})


# === üß© –§–∏–∫—Å—Ç—É—Ä—ã ===

@pytest.fixture(scope="session")
@allure.title("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ PDF —Ñ–∞–π–ª–∞")
def pdf_file_content():
    """–ß–∏—Ç–∞–µ—Ç PDF –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–≥–ª—É—à–∫—É."""
    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PDF —Ñ–∞–π–ª–∞"):
        if not os.path.exists(FILE_PATH):
            allure.attach(
                f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {FILE_PATH}",
                name="File Status",
                attachment_type=allure.attachment_type.TEXT
            )
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {FILE_PATH}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
            return b"%PDF-1.7\n%Fake file for autotest\n%%EOF"
        
        with open(FILE_PATH, "rb") as f:
            content = f.read()
            allure.attach(
                f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} –±–∞–π—Ç",
                name="PDF Info",
                attachment_type=allure.attachment_type.TEXT
            )
            return content


@pytest.fixture(scope="session")
@allure.title("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è verify (rool2)")
def auth_token():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è rool2 –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞."""
    allure.dynamic.parameter("Username", USER['username'])
    allure.dynamic.parameter("Role", "verify")
    
    with allure.step(f"–û—Ç–ø—Ä–∞–≤–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {LOGIN_URL}"):
        resp = requests.post(LOGIN_URL, json=USER)
        
        allure.attach(
            json.dumps({"username": USER['username'], "password": "***"}, indent=2),
            name="Login Request",
            attachment_type=allure.attachment_type.JSON
        )
        
        allure.attach(
            resp.text,
            name="Login Response",
            attachment_type=allure.attachment_type.JSON
        )
        
        assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {resp.text}"
    
    with allure.step("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞"):
        data = resp.json()
        assert "token" in data, f"–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {data}"
        token = data["token"]
        role = data.get("role")
        
        allure.attach(
            f"Token: {token[:20]}...\nRole: {role}",
            name="Auth Info",
            attachment_type=allure.attachment_type.TEXT
        )
        
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {USER['username']}, —Ä–æ–ª—å: {role}")
        
    return token


@pytest.fixture(scope="session")
def jwt_headers(auth_token):
    """HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å Bearer —Ç–æ–∫–µ–Ω–æ–º"""
    return {"Authorization": f"Bearer {auth_token}"}


@pytest.fixture(scope="session")
def api_client(auth_token):
    """API –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    return VerifyApiClient(auth_token)


@pytest.fixture
def first_cadastre(api_client):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    with allure.step("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"):
        resp = api_client.get_cadastre_list()
        assert resp.status_code == 200, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫: {resp.text}"
        
        data = resp.json().get("data", [])
        if not data:
            pytest.skip("–ù–µ—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        cadastre = data[0]
        cadastre_id = cadastre.get("id") or cadastre.get("ID")
        
        allure.attach(
            json.dumps(cadastre, indent=2, ensure_ascii=False),
            name="First Cadastre",
            attachment_type=allure.attachment_type.JSON
        )
        
        allure.dynamic.parameter("Cadastre ID", cadastre_id)
        
        return cadastre


# === üß™ –¢–ï–°–¢–´ ===

@allure.epic("Cadastre API")
@allure.feature("Cadastre Viewing")
@allure.story("List Cadastres")
class TestCadastreList:
    """–¢–µ—Å—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
    
    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å verify –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–¥–∞—Å—Ç—Ä–æ–≤")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.tag("smoke", "cadastre", "list")
    def test_01_get_cadastre_list(self, api_client):
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞"):
            resp = api_client.get_cadastre_list()
            
            allure.attach(
                f"GET {api_client.cadastre_url}",
                name="Request URL",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="Response Body",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ 200"):
            assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞: {resp.text}"
        
        with allure.step("–ü–æ–¥—Å—á–µ—Ç –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"):
            data = resp.json().get("data", [])
            count = len(data)
            
            allure.attach(
                f"–í—Å–µ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤: {count}",
                name="Statistics",
                attachment_type=allure.attachment_type.TEXT
            )
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {count} –∫–∞–¥–∞—Å—Ç—Ä–æ–≤")
    
    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ ID")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ –µ–≥–æ ID")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("cadastre", "read")
    def test_02_get_cadastre_by_id(self, api_client, first_cadastre):
        """‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥–∞—Å—Ç—Ä–∞ –ø–æ ID"""
        
        cadastre_id = first_cadastre.get("id") or first_cadastre.get("ID")
        
        with allure.step(f"–ó–∞–ø—Ä–æ—Å –∫–∞–¥–∞—Å—Ç—Ä–∞ —Å ID={cadastre_id}"):
            resp = api_client.get_cadastre_by_id(cadastre_id)
            
            allure.attach(
                resp.text,
                name="Cadastre Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è"):
            assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {resp.text}"
            
            data = resp.json()
            response_id = data.get("id") or data.get("ID")
            
            assert response_id == cadastre_id, f"ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {response_id} != {cadastre_id}"
            
            print(f"‚úÖ –ö–∞–¥–∞—Å—Ç—Ä ID={cadastre_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    
    @allure.title("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–¥–∞—Å—Ç—Ä–∞")
    @allure.description("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥–∞—Å—Ç—Ä–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("negative", "validation")
    def test_03_get_invalid_cadastre(self, api_client):
        """‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID"""
        
        invalid_id = 9999999
        allure.dynamic.parameter("Invalid ID", invalid_id)
        
        with allure.step(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥–∞—Å—Ç—Ä ID={invalid_id}"):
            resp = api_client.get_cadastre_by_id(invalid_id)
            
            allure.attach(
                resp.text,
                name="Error Response",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ 404 –∏–ª–∏ 400"):
            assert resp.status_code in (404, 400), f"–û–∂–∏–¥–∞–ª—Å—è 404/400, –ø–æ–ª—É—á–µ–Ω {resp.status_code}"
            print(f"‚ùå –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–¥–∞—Å—Ç—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω: {resp.status_code}")


@allure.epic("Cadastre API")
@allure.feature("Cadastre Filtering")
@allure.story("Filter by Region")
class TestCadastreFiltering:
    """–¢–µ—Å—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
    
    @allure.title("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É (region_soato)")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–∞–¥–∞—Å—Ç—Ä–æ–≤ –ø–æ –∫–æ–¥—É —Ä–µ–≥–∏–æ–Ω–∞ SOATO")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("filter", "region")
    def test_01_filter_by_region(self, api_client):
        """‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
        
        region_code = "1726"
        allure.dynamic.parameter("Region SOATO", region_code)
        
        with allure.step(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É {region_code}"):
            resp = api_client.filter_by_region(region_code)
            
            allure.attach(
                f"GET {api_client.cadastre_url}?region_soato={region_code}",
                name="Request URL",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="Filtered Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"):
            assert resp.status_code == 200, f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {resp.text}"
        
        with allure.step("–ü–æ–¥—Å—á–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"):
            data = resp.json().get("data", [])
            count = len(data)
            
            allure.attach(
                f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}",
                name="Filter Results",
                attachment_type=allure.attachment_type.TEXT
            )
            
            print(f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É {region_code} —É—Å–ø–µ—à–Ω–∞ ({count} –∑–∞–ø–∏—Å–µ–π)")
    
    @allure.title("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é")
    @allure.description("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    @allure.severity(allure.severity_level.MINOR)
    @allure.tag("validation", "negative")
    def test_02_search_by_invalid_field(self, api_client):
        """‚ùå –§–∏–ª—å—Ç—Ä –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—é"""
        
        invalid_param = {"fake_field": "xxx"}
        allure.dynamic.parameter("Invalid Params", str(invalid_param))
        
        with allure.step("–ó–∞–ø—Ä–æ—Å —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º"):
            resp = api_client.get_cadastre_list(params=invalid_param)
            
            allure.attach(
                resp.text,
                name="Response",
                attachment_type=allure.attachment_type.JSON
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å"):
            assert resp.status_code in (200, 400), f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {resp.status_code}"
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä ({resp.status_code})")


@allure.epic("Cadastre API")
@allure.feature("Verification")
@allure.story("Verify Cadastre")
class TestCadastreVerification:
    """–¢–µ—Å—Ç—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤"""
    
    @allure.title("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–¥–∞—Å—Ç—Ä–∞ (verified=True)")
    @allure.description("""
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å verify –º–æ–∂–µ—Ç:
    1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–¥–∞—Å—Ç—Ä—ã
    2. –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–¥–∞—Å—Ç—Ä –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
    3. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """)
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.tag("verification", "critical")
    def test_01_verify_status_true(self, api_client, first_cadastre):
        """‚úÖ –û—Ç–º–µ—Ç–∫–∞ –∫–∞–¥–∞—Å—Ç—Ä–∞ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ"""
        
        cadastre_id = first_cadastre.get("id") or first_cadastre.get("ID")
        current_status = first_cadastre.get("verification_status") or first_cadastre.get("status") or "unknown"
        
        allure.attach(
            f"ID: {cadastre_id}\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status}",
            name="Cadastre Info",
            attachment_type=allure.attachment_type.TEXT
        )
        
        print(f"üîé –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–∞–¥–∞—Å—Ç—Ä–∞ ID={cadastre_id}: {current_status}")
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"):
            comment = f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ verify {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            resp = api_client.verify_cadastre(cadastre_id, verified=True, comment=comment)
            
            allure.attach(
                json.dumps({"verified": True, "comment": comment}, indent=2),
                name="Verification Payload",
                attachment_type=allure.attachment_type.JSON
            )
            
            allure.attach(
                resp.text,
                name="Verification Response",
                attachment_type=allure.attachment_type.JSON
            )
            
            if resp.status_code == 403:
                pytest.skip("‚õîÔ∏è verify –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å (–æ–∂–∏–¥–∞–µ–º–æ)")
            elif resp.status_code == 404:
                pytest.skip("‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç /verification –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                assert resp.status_code in (200, 202), f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {resp.text}"
                print(f"‚úÖ –ö–∞–¥–∞—Å—Ç—Ä ID={cadastre_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ verified=True")
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"):
            resp_check = api_client.get_cadastre_by_id(cadastre_id)
            
            allure.attach(
                resp_check.text,
                name="Updated Cadastre",
                attachment_type=allure.attachment_type.JSON
            )
            
            assert resp_check.status_code == 200
            updated_data = resp_check.json()
            new_status = (
                updated_data.get("verification_status")
                or updated_data.get("status")
                or updated_data.get("verified")
            )
            
            allure.attach(
                f"–°—Ç–∞—Ç—É—Å –¥–æ: {current_status}\n–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ: {new_status}",
                name="Status Comparison",
                attachment_type=allure.attachment_type.TEXT
            )
            
            print(f"üîÅ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")


@allure.epic("Cadastre API")
@allure.feature("Authentication & Security")
@allure.story("Access Control")
class TestAuthentication:
    """–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    @allure.title("–î–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
    @allure.description("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.tag("security", "auth", "negative")
    def test_01_unauthorized_access(self):
        """‚ùå –î–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞"""
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ Authorization"):
            resp = requests.get(CADASTRE_URL)
            
            allure.attach(
                f"GET {CADASTRE_URL}\nHeaders: None",
                name="Request Info",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="401 Response",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞ 401"):
            assert resp.status_code == 401, f"–û–∂–∏–¥–∞–ª—Å—è 401, –ø–æ–ª—É—á–µ–Ω {resp.status_code}"
            print("‚ùå –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª 401 Unauthorized")
    
    @allure.title("–î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
    @allure.description("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ API –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
    @allure.severity(allure.severity_level.CRITICAL)
    @allure.tag("security", "auth", "negative")
    def test_02_wrong_token(self):
        """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"""
        
        fake_token = "BADTOKEN123"
        allure.dynamic.parameter("Fake Token", fake_token)
        
        with allure.step("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"):
            fake_headers = {"Authorization": f"Bearer {fake_token}"}
            resp = requests.get(CADASTRE_URL, headers=fake_headers)
            
            allure.attach(
                f"Authorization: Bearer {fake_token}",
                name="Request Headers",
                attachment_type=allure.attachment_type.TEXT
            )
            
            allure.attach(
                resp.text,
                name="Error Response",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ 401 –∏–ª–∏ 403"):
            assert resp.status_code in (401, 403), f"–û–∂–∏–¥–∞–ª—Å—è 401/403, –ø–æ–ª—É—á–µ–Ω {resp.status_code}"
            print(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ ({resp.status_code})")


@allure.epic("Cadastre API")
@allure.feature("Performance")
@allure.story("Response Time")
class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API"""
    
    @allure.title("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API")
    @allure.description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ (< 3 —Å–µ–∫—É–Ω–¥)")
    @allure.severity(allure.severity_level.NORMAL)
    @allure.tag("performance", "sla")
    def test_01_response_time(self, api_client):
        """‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API < 3s"""
        
        max_time = 3.0
        allure.dynamic.parameter("Max Response Time", f"{max_time}s")
        
        with allure.step("–ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"):
            start = time.time()
            resp = api_client.get_cadastre_list()
            duration = time.time() - start
            
            allure.attach(
                f"–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {duration:.3f}s\n"
                f"–ú–∞–∫—Å–∏–º—É–º: {max_time}s\n"
                f"–°—Ç–∞—Ç—É—Å: {'‚úÖ PASS' if duration < max_time else '‚ùå FAIL'}",
                name="Performance Metrics",
                attachment_type=allure.attachment_type.TEXT
            )
        
        with allure.step(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Ä–µ–º—è < {max_time}s"):
            assert resp.status_code == 200, f"Request failed: {resp.status_code}"
            assert duration < max_time, f"–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {duration:.2f}s"
            print(f"‚úÖ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API: {duration:.2f}s")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s", "--alluredir=allure-results"])